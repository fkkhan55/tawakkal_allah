// App.js
import React, { useState, useEffect, useCallback } from 'react';
import { View, Text, FlatList, Switch, StyleSheet, I18nManager } from 'react-native';
import * as Location from 'expo-location';
import { Audio } from 'expo-av';
import i18n from 'i18next';
import { initReactI18next, useTranslation } from 'react-i18next';

// Translation setup (aap apni files me badal sakte hain)
const resources = {
  en: {
    translation: {
      quranTitle: 'Tawakkal Allah - Quran',
      playAudio: 'Play Urdu Audio',
      stopAudio: 'Stop Audio',
      namazTimes: 'Namaz Timings',
      darkMode: 'Dark Mode',
      fetchingLocation: 'Fetching location...',
    },
  },
  ur: {
    translation: {
      quranTitle: 'توکل اللہ - قرآن',
      playAudio: 'اردو آڈیو چلائیں',
      stopAudio: 'آڈیو روکیں',
      namazTimes: 'نماز کے اوقات',
      darkMode: 'ڈارک موڈ',
      fetchingLocation: 'مقام حاصل کیا جا رہا ہے...',
    },
  },
};

i18n.use(initReactI18next).init({
  resources,
  lng: 'en',
  fallbackLng: 'en',
  interpolation: { escapeValue: false },
});

const quranData = [
  { id: '1', arabic: 'بِسْمِ اللَّهِ الرَّحْمَٰنِ الرَّحِيمِ', translation: 'Bismillah-ir-Rahman-ir-Raheem' },
  { id: '2', arabic: 'الْحَمْدُ لِلَّهِ رَبِّ الْعَالَمِينَ', translation: 'All praise is for Allah, Lord of the worlds' },
  // Aap aur ayat add kar sakte hain
];

export default function App() {
  const { t } = useTranslation();
  const [sound, setSound] = useState(null);
  const [isPlaying, setIsPlaying] = useState(false);
  const [darkMode, setDarkMode] = useState(false);
  const [namazTimes, setNamazTimes] = useState(null);

  useEffect(() => {
    (async () => {
      let { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') {
        alert('Location permission is needed for Namaz timings');
        return;
      }
      let location = await Location.getCurrentPositionAsync({});
      // Yahan aap namaz timing calculation ka logic add karein, abhi dummy data hai
      setNamazTimes({
        Fajr: '04:30 AM',
        Dhuhr: '12:30 PM',
        Asr: '04:00 PM',
        Maghrib: '07:00 PM',
        Isha: '08:30 PM',
      });
    })();
  }, []);

  const playAudio = useCallback(async () => {
    const { sound } = await Audio.Sound.createAsync(
      require('./assets/urdu_quran_audio.mp3')
    );
    setSound(sound);
    await sound.playAsync();
    setIsPlaying(true);
  }, []);

  const stopAudio = useCallback(async () => {
    if (sound) {
      await sound.stopAsync();
      setIsPlaying(false);
      setSound(null);
    }
  }, [sound]);

  const backgroundColor = darkMode ? '#121212' : '#fff';
  const textColor = darkMode ? '#fff' : '#000';

  return (
    <View style={[styles.container, { backgroundColor }]}>
      <Text style={[styles.title, { color: textColor }]}>{t('quranTitle')}</Text>

      <FlatList
        data={quranData}
        keyExtractor={(item) => item.id}
        renderItem={({ item }) => (
          <View style={styles.ayahContainer}>
            <Text style={[styles.arabicText, { color: textColor }]}>{item.arabic}</Text>
            <Text style={[styles.translationText, { color: textColor }]}>{item.translation}</Text>
          </View>
        )}
      />

      {isPlaying ? (
        <Text style={{ color: textColor, marginVertical: 10 }} onPress={stopAudio}>
          {t('stopAudio')}
        </Text>
      ) : (
        <Text style={{ color: textColor, marginVertical: 10 }} onPress={playAudio}>
          {t('playAudio')}
        </Text>
      )}

      <View style={{ marginVertical: 20 }}>
        <Text style={[styles.title, { color: textColor }]}>{t('namazTimes')}</Text>
        {namazTimes ? (
          Object.entries(namazTimes).map(([key, time]) => (
            <Text key={key} style={{ color: textColor }}>
              {key}: {time}
            </Text>
          ))
        ) : (
          <Text style={{ color: textColor }}>{t('fetchingLocation')}</Text>
        )}
      </View>

      <View style={styles.darkModeRow}>
        <Text style={{ color: textColor, marginRight: 10 }}>{t('darkMode')}</Text>
        <Switch value={darkMode} onValueChange={setDarkMode} />
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, padding: 20, paddingTop: 50 },
  title: { fontSize: 24, fontWeight: 'bold', marginBottom: 20, textAlign: 'center' },
  ayahContainer: { marginBottom: 15 },
  arabicText: { fontSize: 22, textAlign: 'right', fontFamily: 'Amiri-Regular' },
  translationText: { fontSize: 16, fontStyle: 'italic' },
  darkModeRow: { flexDirection: 'row', alignItems: 'center', justifyContent: 'center', marginTop: 20 },
});
